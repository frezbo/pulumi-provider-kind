// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the kind package.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'kind';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Provider.__pulumiType;
    }


    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            inputs["configFile"] = args ? args.configFile : undefined;
            inputs["kubeconfigFile"] = args ? args.kubeconfigFile : undefined;
            inputs["nodeImage"] = args ? args.nodeImage : undefined;
            inputs["provider"] = args ? args.provider : undefined;
            inputs["retainNodesOnFailure"] = pulumi.output(args ? args.retainNodesOnFailure : undefined).apply(JSON.stringify);
            inputs["stopBeforeSettingK8s"] = pulumi.output(args ? args.stopBeforeSettingK8s : undefined).apply(JSON.stringify);
            inputs["waitForNodeReady"] = pulumi.output(args ? args.waitForNodeReady : undefined).apply(JSON.stringify);
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Provider.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * Kind config file to use. Optional
     */
    configFile?: pulumi.Input<string>;
    /**
     * File to save generated kubeconfig. Default: not set. Optional
     */
    kubeconfigFile?: pulumi.Input<string>;
    /**
     * Node image to use. Optional
     */
    nodeImage?: pulumi.Input<string>;
    /**
     * Provider to use. Supports docker/podman. Default: docker. Optional
     */
    provider?: pulumi.Input<string>;
    /**
     * Whether to retain the nodes when creation fails. Needs manual cleanup when set to true Default: false. Optional
     */
    retainNodesOnFailure?: pulumi.Input<boolean>;
    /**
     * Stop before running kubeadm commands. This would need the user to manually retrieve the Kubeconfig. Default: false. Optional
     */
    stopBeforeSettingK8s?: pulumi.Input<boolean>;
    /**
     * Time in seconds to wait for nodes to become ready. Default: none. Optional
     */
    waitForNodeReady?: pulumi.Input<number>;
}
